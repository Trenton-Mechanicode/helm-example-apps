apiVersion: apps/v1
kind: Deployment
metadata:
  name: az-go-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: az-go-app
  template:
    metadata:
      labels:
        app: az-go-app
    spec:
      securityContext:
        runAsNonRoot: true  # Ensure the container doesn't run as root
        runAsUser: 1337     # Set the user ID to hello's UID
      nodeName: dalek
      containers:
      - name: az-go-container
        image: us-east4-docker.pkg.dev/cloudarchitect-408513/hello-world/hello-world-go:latest
        ports:
        - containerPort: 8080
        resources:  # Define resource limits and requests
          limits:
            cpu: "0.5"  # 0.5 CPU cores
            memory: "512Mi"  # 512 MB memory
          requests:
            cpu: "0.1"  # 0.1 CPU cores
            memory: "128Mi"  # 128 MB memory
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: az-go-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: az-go-app
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader-go
  namespace: hello
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding-go
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role
  name: pod-reader-go
  apiGroup: rbac.authorization.k8s.io
---
# Fix ingress so all traffic is handled by the backend not by explicitly defined paths
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: az-go-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - app.blitzbaud.com
      secretName: az-go-tls
  rules:
    - host: app.blitzbaud.com
      http:
        paths:
          - path: /go/hello(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: az-go-service
                port:
                  number: 80
